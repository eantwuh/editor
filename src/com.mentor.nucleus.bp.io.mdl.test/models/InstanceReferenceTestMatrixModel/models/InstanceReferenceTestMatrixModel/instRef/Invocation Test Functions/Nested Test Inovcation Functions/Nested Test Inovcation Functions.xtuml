-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("87a26207-728a-4f10-8e04-d7ac1a67f6e7",
	"00000000-0000-0000-0000-000000000000",
	"13c14d34-d225-4949-89b6-fe738cc62cbb",
	'Nested Test Inovcation Functions',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("765b45fb-5408-4c53-8b6c-3ecb0c23d3a0",
	112,
	"87a26207-728a-4f10-8e04-d7ac1a67f6e7",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'3.2.3',
	'InstanceReferenceTestMatrixModel::instRef::Invocation Test Functions::Nested Test Inovcation Functions');
INSERT INTO DIM_DIA
	VALUES ("765b45fb-5408-4c53-8b6c-3ecb0c23d3a0",
	'',
	1.000000,
	4000.000000,
	3000.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("d1b495c2-dcdb-4a06-aabf-36b23354c73f",
	"00000000-0000-0000-0000-000000000000",
	'Attribute_Nested',
	'',
	'LOG::LogInfo(message:"Operation entered: Attribute Nested Test Started");

::setup(accessType:"Nested",referenceType:"Attribute"); 
select any test from instances of ATTR3;
test.O_ATTR_readAttr();
::dispose(accessType:"Nested",referenceType:"Attribute");  

::setup(accessType:"Nested",referenceType:"Attribute"); 
select any test from instances of ATTR3;
test.O_ATTR_WhereClause();
::dispose(accessType:"Nested",referenceType:"Attribute");  

::setup(accessType:"Nested",referenceType:"Attribute"); 
select any test from instances of ATTR3;
test.O_ATTR_booleanBinaryOperationLeftOperand();
::dispose(accessType:"Nested",referenceType:"Attribute");  

::setup(accessType:"Nested",referenceType:"Attribute"); 
select any test from instances of ATTR3;
test.O_ATTR_booleanBinaryOperationRightOperand();
::dispose(accessType:"Nested",referenceType:"Attribute");  

::setup(accessType:"Nested",referenceType:"Attribute"); 
select any test from instances of ATTR3;
test.O_ATTR_writeAttr();
::dispose(accessType:"Nested",referenceType:"Attribute");

::setup(accessType:"Nested",referenceType:"Attribute"); 
select any test from instances of ATTR3;
test.O_ATTR_booleanBinaryOperationLeftOperandSet();
::dispose(accessType:"Nested",referenceType:"Attribute");

::setup(accessType:"Nested",referenceType:"Attribute"); 
select any test from instances of ATTR3;
test.O_ATTR_booleanBinaryOperationRightOperandSet();
::dispose(accessType:"Nested",referenceType:"Attribute");

::setup(accessType:"Nested",referenceType:"Attribute"); 
select any test from instances of ATTR3;
test.O_ATTR_ActivitiesInvocation();
::dispose(accessType:"Nested",referenceType:"Attribute");

::setup(accessType:"Nested",referenceType:"Attribute"); 
select any test from instances of ATTR3;
test.O_ATTR_ActivitiesInvocationSet();
::dispose(accessType:"Nested",referenceType:"Attribute");

LOG::LogInfo(message:"Operation entered: Attribute Parameter Nested Test Ended");',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("d1b495c2-dcdb-4a06-aabf-36b23354c73f",
	1,
	"87a26207-728a-4f10-8e04-d7ac1a67f6e7",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("111e410c-6e06-461b-b98f-f85ad5109e1f",
	"00000000-0000-0000-0000-000000000000",
	'StructureMember_Nested',
	'',
	'LOG::LogInfo(message:"Operation entered: Structure Member Nested Test Started");

::setup(accessType:"Nested",referenceType:"Structure Member"); 
select any test from instances of MBR3;
test.S_MBR_readAttr();
::dispose(accessType:"Nested",referenceType:"Structure Member");  

::setup(accessType:"Nested",referenceType:"Structure Member"); 
select any test from instances of MBR3;
test.S_MBR_WhereClause();
::dispose(accessType:"Nested",referenceType:"Structure Member");  

::setup(accessType:"Nested",referenceType:"Structure Member"); 
select any test from instances of MBR3;
test.S_MBR_booleanBinaryOperationLeftOperand();
::dispose(accessType:"Nested",referenceType:"Structure Member");  

::setup(accessType:"Nested",referenceType:"Structure Member"); 
select any test from instances of MBR3;
test.S_MBR_booleanBinaryOperationRightOperand();
::dispose(accessType:"Nested",referenceType:"Structure Member");  

::setup(accessType:"Nested",referenceType:"Structure Member"); 
select any test from instances of MBR3;
test.S_MBR_writeAttr();
::dispose(accessType:"Nested",referenceType:"Structure Member");

::setup(accessType:"Nested",referenceType:"Structure Member"); 
select any test from instances of MBR3;
test.S_MBR_booleanBinaryOperationLeftOperandSet();
::dispose(accessType:"Nested",referenceType:"Structure Member");

::setup(accessType:"Nested",referenceType:"Structure Member"); 
select any test from instances of MBR3;
test.S_MBR_booleanBinaryOperationRightOperandSet();
::dispose(accessType:"Nested",referenceType:"Structure Member");

::setup(accessType:"Nested",referenceType:"Structure Member"); 
select any test from instances of MBR3;
test.S_MBR_ActivitiesInvocation();
::dispose(accessType:"Nested",referenceType:"Structure Member");

::setup(accessType:"Nested",referenceType:"Structure Member"); 
select any test from instances of MBR3;
test.S_MBR_ActivitiesInvocationSet();
::dispose(accessType:"Nested",referenceType:"Structure Member");

LOG::LogInfo(message:"Operation entered: Structure Member Parameter Nested Test Ended");',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("111e410c-6e06-461b-b98f-f85ad5109e1f",
	1,
	"87a26207-728a-4f10-8e04-d7ac1a67f6e7",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4c63e48c-0c90-4efa-a4ac-a1fac0dcc729",
	"00000000-0000-0000-0000-000000000000",
	'MixedOne_Nested',
	'',
	'LOG::LogInfo(message:"Operation entered: Mixed One Nested Test Started");

::setup(accessType:"Nested",referenceType:"Mixed One"); 
select any car from instances of V;
MIX1::MIX_readAttr(instRef:car);
::dispose(accessType:"Nested",referenceType:"Mixed One");  

::setup(accessType:"Nested",referenceType:"Mixed One"); 
select any car from instances of V;
MIX1::MIX_WhereClause(instRef:car);
::dispose(accessType:"Nested",referenceType:"Mixed One");  

::setup(accessType:"Nested",referenceType:"Mixed One"); 
select any car from instances of V;
MIX1::MIX_booleanBinaryOperationLeftOperand(instRef:car);
::dispose(accessType:"Nested",referenceType:"Mixed One");  

::setup(accessType:"Nested",referenceType:"Mixed One"); 
select any car from instances of V;
MIX1::MIX_booleanBinaryOperationRightOperand(instRef:car);
::dispose(accessType:"Nested",referenceType:"Mixed One");  

::setup(accessType:"Nested",referenceType:"Mixed One"); 
select any car from instances of V;
MIX1::MIX_writeAttr(instRef:car);
::dispose(accessType:"Nested",referenceType:"Mixed One");

::setup(accessType:"Nested",referenceType:"Mixed One"); 
select many cars from instances of V;
MIX1::MIX_booleanBinaryOperationLeftOperandSet(instRef_set:cars);
::dispose(accessType:"Nested",referenceType:"Mixed One");

::setup(accessType:"Nested",referenceType:"Mixed One"); 
select many cars from instances of V;
MIX1::MIX_booleanBinaryOperationRightOperandSet(instRef_set:cars);
::dispose(accessType:"Nested",referenceType:"Mixed One");

::setup(accessType:"Nested",referenceType:"Mixed One"); 
select any car from instances of V;
MIX1::MIX_ActivitiesInvocation(instRef:car);
::dispose(accessType:"Nested",referenceType:"Mixed One");

::setup(accessType:"Nested",referenceType:"Mixed One"); 
select many cars from instances of V;
MIX1::MIX_ActivitiesInvocationSet(instRef_set:cars);
::dispose(accessType:"Nested",referenceType:"Mixed One");

LOG::LogInfo(message:"Operation entered: Mixed One Nested Test Ended");',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("4c63e48c-0c90-4efa-a4ac-a1fac0dcc729",
	1,
	"87a26207-728a-4f10-8e04-d7ac1a67f6e7",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("eea30057-08a6-40aa-bec0-f125e20e789e",
	"00000000-0000-0000-0000-000000000000",
	'MixedTwo_Nested',
	'',
	'LOG::LogInfo(message:"Operation entered: Mixed Two Nested Test Started");

::setup(accessType:"Nested",referenceType:"Mixed Two"); 
select any test from instances of MIX2;
test.MIX_readAttr();
::dispose(accessType:"Nested",referenceType:"Mixed Two");  

::setup(accessType:"Nested",referenceType:"Mixed Two"); 
select any test from instances of MIX2;
test.MIX_WhereClause();
::dispose(accessType:"Nested",referenceType:"Mixed Two");  

::setup(accessType:"Nested",referenceType:"Mixed Two"); 
select any test from instances of MIX2;
test.MIX_booleanBinaryOperationLeftOperand();
::dispose(accessType:"Nested",referenceType:"Mixed Two");  

::setup(accessType:"Nested",referenceType:"Mixed Two"); 
select any test from instances of MIX2;
test.MIX_booleanBinaryOperationRightOperand();
::dispose(accessType:"Nested",referenceType:"Mixed Two");  

::setup(accessType:"Nested",referenceType:"Mixed Two"); 
select any test from instances of MIX2;
test.MIX_writeAttr();
::dispose(accessType:"Nested",referenceType:"Mixed Two");

::setup(accessType:"Nested",referenceType:"Mixed Two"); 
select any test from instances of MIX2;
test.MIX_booleanBinaryOperationLeftOperandSet();
::dispose(accessType:"Nested",referenceType:"Mixed Two");

::setup(accessType:"Nested",referenceType:"Mixed Two"); 
select any test from instances of MIX2;
test.MIX_booleanBinaryOperationRightOperandSet();
::dispose(accessType:"Nested",referenceType:"Mixed Two");

::setup(accessType:"Nested",referenceType:"Mixed Two"); 
select any test from instances of MIX2;
test.MIX_ActivitiesInvocation();
::dispose(accessType:"Nested",referenceType:"Mixed Two");

::setup(accessType:"Nested",referenceType:"Mixed Two"); 
select any test from instances of MIX2;
test.MIX_ActivitiesInvocationSet();
::dispose(accessType:"Nested",referenceType:"Mixed Two");

LOG::LogInfo(message:"Operation entered: Mixed Two Parameter Nested Test Ended");',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("eea30057-08a6-40aa-bec0-f125e20e789e",
	1,
	"87a26207-728a-4f10-8e04-d7ac1a67f6e7",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("676ef44c-f6a7-4fd0-acc6-980acbdf1ad1",
	"00000000-0000-0000-0000-000000000000",
	'MixedThree_Nested',
	'',
	'LOG::LogInfo(message:"Operation entered: Mixed Three Nested Test Started");

::setup(accessType:"Nested",referenceType:"Mixed Three"); 
select any test from instances of MIX3;
test.MIX_readAttr();
::dispose(accessType:"Nested",referenceType:"Mixed Three");  

::setup(accessType:"Nested",referenceType:"Mixed Three"); 
select any test from instances of MIX3;
test.MIX_WhereClause();
::dispose(accessType:"Nested",referenceType:"Mixed Three");  

::setup(accessType:"Nested",referenceType:"Mixed Three"); 
select any test from instances of MIX3;
test.MIX_booleanBinaryOperationLeftOperand();
::dispose(accessType:"Nested",referenceType:"Mixed Three");  

::setup(accessType:"Nested",referenceType:"Mixed Three"); 
select any test from instances of MIX3;
test.MIX_booleanBinaryOperationRightOperand();
::dispose(accessType:"Nested",referenceType:"Mixed Three");  

::setup(accessType:"Nested",referenceType:"Mixed Three"); 
select any test from instances of MIX3;
test.MIX_writeAttr();
::dispose(accessType:"Nested",referenceType:"Mixed Three");

::setup(accessType:"Nested",referenceType:"Mixed Three"); 
select any test from instances of MIX3;
test.MIX_booleanBinaryOperationLeftOperandSet();
::dispose(accessType:"Nested",referenceType:"Mixed Three");

::setup(accessType:"Nested",referenceType:"Mixed Three"); 
select any test from instances of MIX3;
test.MIX_booleanBinaryOperationRightOperandSet();
::dispose(accessType:"Nested",referenceType:"Mixed Three");

::setup(accessType:"Nested",referenceType:"Mixed Three"); 
select any test from instances of MIX3;
test.MIX_ActivitiesInvocation();
::dispose(accessType:"Nested",referenceType:"Mixed Three");

::setup(accessType:"Nested",referenceType:"Mixed Three"); 
select any test from instances of MIX3;
test.MIX_ActivitiesInvocationSet();
::dispose(accessType:"Nested",referenceType:"Mixed Three");

LOG::LogInfo(message:"Operation entered: Mixed Three Parameter Nested Test Ended");',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("676ef44c-f6a7-4fd0-acc6-980acbdf1ad1",
	1,
	"87a26207-728a-4f10-8e04-d7ac1a67f6e7",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("87a26207-728a-4f10-8e04-d7ac1a67f6e7",
	1,
	"00eb78a1-4fd3-4de4-b0c4-82f871e6cea8",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("00eb78a1-4fd3-4de4-b0c4-82f871e6cea8",
	"00000000-0000-0000-0000-000000000000",
	"13c14d34-d225-4949-89b6-fe738cc62cbb",
	'Invocation Test Functions',
	'',
	0,
	'../Invocation Test Functions.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("13c14d34-d225-4949-89b6-fe738cc62cbb",
	'InstanceReferenceTestMatrixModel',
	1,
	'../../../InstanceReferenceTestMatrixModel.xtuml');
